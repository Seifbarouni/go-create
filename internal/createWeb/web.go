package createWeb

import (
	"fmt"
	"os"
	"time"

	colorize "github.com/Seifbarouni/go-create/internal/colorizeText"
	h "github.com/Seifbarouni/go-create/internal/helpers"
)

func initializeModuleWithFiber(moduleName string) {
	// go mod init with the module name
	h.ExecuteCommand("go", "mod", "init", moduleName)
	// go get -u github.com/gofiber/fiber/v2
	h.ExecuteCommand("go", "get", "-u", "github.com/gofiber/fiber/v2")
}

func createBackendWebApp(folderName string) {
	moduleName := ""
	// get module name from user
	colorize.PrintWithColor("module name :", colorize.Gray)
	fmt.Scanln(&moduleName)
	// if the module name is empty recall the function
	if moduleName == "" {
		createBackendWebApp(folderName)
	}
	initializeModuleWithFiber(moduleName)
	// initialize go-fiber in the main.go file
	h.CreateFile("main.go", "//GENERATED BY go-create\npackage main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\td \""+moduleName+"/database\"\n\tr \""+moduleName+"/routes\"\n)\n\nfunc main() {\n\td.InitializeDB()\n\tapp := fiber.New()\n\tr.PublicRoutes(app)\n\tr.PrivateRoutes(app)\n\tapp.Listen(\":3000\")\n}")

	h.CreateFile(".env", "JWT_SECRET=my-secret-key\nDB_CONN=host=localhost user=postgres password=postgres dbname=postgres sslmode=disable")
	h.CreateFile("Dockefile", "#GENERATED BY go-create\nFROM golang:1.17.5-alpine3.15 AS builder\n# Move to working directory (/build).\nWORKDIR /build\n# Copy and download dependency using go mod.\nCOPY go.mod go.sum ./\nRUN go mod download\n#Copy the code into the container.\nCOPY . .\n# Set necessary environment variables needed for our image and build the API server.\nENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64\nRUN go build -ldflags=\"-s -w\" -o apiserver .\nFROM scratch\n# Copy binary and config files from /build to root folder of scratch container.\nCOPY --from=builder [\"/build/apiserver\", \"/build/.env\", \"/\"]\n# Export necessary port.\nEXPOSE 8080\n# Command to run when starting the container.\nENTRYPOINT [\"/apiserver\"]\n")
	h.CreateFile(".dockerignore", "#GENERATED BY go-create\n# Files\n.dockerignore\n.editorconfig\ngitignore\n.env\nDockerfile\nLICENSE\n**/*.md\n**/*_test.go\n# Folders\n.git/\n.github/\nbuild/")
	h.CreateFile(".gitignore", "#GENERATED BY go-create\nbuild/\ntmp/\n.env\n*.exe")

	h.AddFolderAndReadme("models", "# `/models`\n This is where you will create your models")
	h.AddFolderAndReadme("controllers", "# `/controllers`\n This is where you will create your controllers")
	h.AddFolderAndReadme("services", "# `/services`\n This is where you will create your services")
	h.AddFolderAndReadme("routes", "# `/routes`\n This is where you will create your public and private routes")
	h.AddFolderAndReadme("database", "# `/database`\n This is where you will create your database")
	h.AddFolderAndReadme("config", "# `/config`\n This is where you will create your config")

	h.AddPublicAndPrivateRoutes()

}

func createFrontendApp() {
	// get type of frontend app from user : react, nextjs, vue
	colorize.PrintWithColor("What type of frontend app do you want to create?\n1. react\n2. nextjs\n3. vue\n4. svelte\n", colorize.Gray)
	var frontendType string
	fmt.Print("-->")
	fmt.Scanln(&frontendType)

	if frontendType == "1" || frontendType == "react" {
		h.ExecuteCommand("npx", "create-react-app", "frontend", "--template", "typescript")
	} else if frontendType == "2" || frontendType == "nextjs" {
		h.ExecuteCommand("npx", "create-next-app@latest", "--typescript", "frontend")
	} else if frontendType == "3" || frontendType == "vue" {
		h.ExecuteCommand("npx", "@vue/cli", "create", "--default", "frontend")
	} else if frontendType == "4" || frontendType == "svelte" {
		h.ExecuteCommand("npx", "degit", "sveltejs/template", "frontend")
	} else {
		colorize.PrintWithColor("Invalid input", colorize.Red)
		os.Exit(1)
	}
}

func createFullstackWebApp() {
	// create the backend folder
	h.CreateFolder("backend")
	// generate the backend files
	createBackendWebApp("backend")
	err := os.Chdir("..")
	if err != nil {
		colorize.PrintWithColor("Error moving to folder", colorize.Red)
		os.Exit(1)
	}
	createFrontendApp()
}

func CreateWebApp(folderName string) {
	// get type of web app from user : fullstack, backend
	colorize.PrintWithColor("What type of web app do you want to create?\n1. fullstack\n2. backend\n", colorize.Gray)
	var appType string
	fmt.Print("-->")
	fmt.Scanln(&appType)
	if appType == "1" || appType == "fullstack" {
		start := time.Now()
		if !h.ValidateFolderName(folderName) {
			colorize.PrintWithColor("Invalid folder name", colorize.Red)
			os.Exit(1)
		}
		if folderName != "." {
			h.CreateFolder(folderName)
		}
		// create a fullstack web app
		createFullstackWebApp()
		// end timer
		elapsed := time.Since(start)
		colorize.PrintWithColor(fmt.Sprintf("Web app created in %s", elapsed), colorize.Green)
	} else if appType == "2" || appType == "backend" {
		// start timer
		start := time.Now()
		if !h.ValidateFolderName(folderName) {
			colorize.PrintWithColor("Invalid folder name", colorize.Red)
			os.Exit(1)
		}
		if folderName != "." {
			h.CreateFolder(folderName)
		}
		createBackendWebApp(folderName)
		// execute git init
		colorize.PrintWithColor("Initializing git repository...", colorize.Blue)
		h.ExecuteCommand("git", "init")
		// end timer
		elapsed := time.Since(start)
		colorize.PrintWithColor(fmt.Sprintf("Web app created in %s", elapsed), colorize.Green)
	} else {
		colorize.PrintWithColor("Invalid input", colorize.Red)
		os.Exit(1)
	}
}
