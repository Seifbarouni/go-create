package helpers

var (
	Env                = "JWT_SECRET=my-secret-key\nDB_CONN=host=localhost user=postgres password=postgres dbname=postgres sslmode=disable"
	Dockerfile         = "#GENERATED BY go-create\nFROM golang:1.17.5-alpine3.15 AS builder\n# Move to working directory (/build).\nWORKDIR /build\n# Copy and download dependency using go mod.\nCOPY go.mod go.sum ./\nRUN go mod download\n#Copy the code into the container.\nCOPY . .\n# Set necessary environment variables needed for our image and build the API server.\nENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64\nRUN go build -ldflags=\"-s -w\" -o apiserver .\nFROM scratch\n# Copy binary and config files from /build to root folder of scratch container.\nCOPY --from=builder [\"/build/apiserver\", \"/build/.env\", \"/\"]\n# Export necessary port.\nEXPOSE 8080\n# Command to run when starting the container.\nENTRYPOINT [\"/apiserver\"]\n"
	Dockerignore       = "#GENERATED BY go-create\n# Files\n.dockerignore\n.editorconfig\ngitignore\n.env\nDockerfile\nLICENSE\n**/*.md\n**/*_test.go\n# Folders\n.git/\n.github/\nbuild/"
	Gitignore          = "#GENERATED BY go-create\nbuild/\ntmp/\n.env\n*.exe"
	ConsoleMain        = "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello World!\")\n}"
	ModelREADME        = "# `/models`\n This is where you will create your models"
	ControllerREADME   = "# `/controllers`\n This is where you will create your controllers"
	ServiceREADME      = "# `/services`\n This is where you will create your services"
	RouteREADME        = "# `/routes`\n This is where you will create your public and private routes"
	DatabaseREADME     = "# `/database`\n This is where you will create your database"
	ConfigREADME       = "# `/config`\n This is where you will create your config"
	BinREADME          = "# `/bin`\n This folder contains the binary files of the app"
	CmdREADME          = "# `/cmd`\n This folder contains the main.go file of the app"
	InternalREADME     = "# `/internal`\n Private application and library code. This is the code you don't want others importing in their applications or libraries."
	PkgREADME          = "# `/pkg`\n Library code that's ok to use by external applications."
	PrivateRoute       = "//GENERATED BY go-create\npackage routes\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc PrivateRoutes(app *fiber.App) {\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn c.JSON(\"Hello World!\")\n\t})\n}"
	PublicRoute        = "//GENERATED BY go-create\npackage routes\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc PublicRoutes(app *fiber.App) {\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn c.JSON(\"Hello World!\")\n\t})\n}"
	FiberPackage       = "github.com/gofiber/fiber/v2"
	GormPackage        = "gorm.io/gorm"
	GormPostgresDriver = "gorm.io/driver/postgres"
)

func GenerateDB(folderName string) string {
	return "//GENERATED BY go-create\npackage " + folderName + "\n\nimport (\n\t\"gorm.io/gorm\"\n\t\"gorm.io/driver/postgres\"\n)\n\nvar DB *gorm.DB = nil\n\nfunc InitializeDB() {\n\tdatabase, err := gorm.Open(postgres.Open(\"host=localhost port=5432 user=postgres dbname=postgres password=postgres sslmode=disable\"),&gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t/*if err=database.AutoMigrate(&models.User{});err != nil{\n\t\tpanic(err)\n\t}*/\n\t DB = database\n}"
}

func GenerateModel(folderName string, imports string, modelName string, structStr string) string {
	return "//GENERATED BY go-create\npackage " + folderName + "\n\n" + imports + "type " + modelName + " struct{\n\t//Add your attributes here\n\tID\tint\n\tCreatedAt\ttime.Time\n\tUpdatedAt\ttime.Time\n" + structStr + "}\n"
}

func GenerateService(folderName string, module string, model string) string {
	return "//GENERATED BY go-create\npackage " + folderName + "\n\nimport (\n\tm \"" + module + "/models\"\n\td \"" + module + "/database\"\n)\n\ntype " + model + "sService struct {}\n\ntype " + model + "sServiceInterface interface {\n\tGet" + model + "s()(*[]m." + model + ",error)\n\tGet" + model + "(id int)(*m." + model + ",error)\n\tCreate" + model + "(" + model + " *m." + model + ")error\n\tUpdate" + model + "(" + model + " *m." + model + ")error\n\tDelete" + model + "(id int)error\n}\nfunc Create" + model + "sService() *" + model + "sService {\n\t return &" + model + "sService{}\n}\nfunc (*" + model + "sService)Get" + model + "s()(*[]m." + model + ",error){\n\t var " + model + "s [] m." + model + "\n\tif result:=d.DB.Find(&" + model + "s); result.Error!=nil{\n\t\treturn nil,result.Error\n\t}\n\treturn &" + model + "s,nil\n}\n\nfunc (*" + model + "sService)Get" + model + "(id int)(*m." + model + ",error){\n\tvar " + model + " m." + model + "\n\tif result:=d.DB.First(&" + model + ",id); result.Error!=nil{\n\t\treturn nil,result.Error\n\t}\n\treturn &" + model + ",nil\n}\n\nfunc (*" + model + "sService)Create" + model + "(" + model + " *m." + model + ")error{\n\tif result:=d.DB.Create(" + model + "); result.Error!=nil{\n\t\treturn result.Error\n\t}\n\treturn nil\n}\n\nfunc (*" + model + "sService)Update" + model + "(" + model + " *m." + model + ")error{\n\tif result:=d.DB.Save(" + model + "); result.Error!=nil{\n\t\treturn result.Error\n\t}\n\treturn nil\n}\n\nfunc (*" + model + "sService)Delete" + model + "(id int)error{\n\tif result:=d.DB.Delete(&m." + model + "{ID:id}); result.Error!=nil{\n\t\treturn result.Error\n\t}\n\treturn nil\n}"
}

func GenerateMainWeb(moduleName string) string {
	return "//GENERATED BY go-create\npackage main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\td \"" + moduleName + "/database\"\n\tr \"" + moduleName + "/routes\"\n)\n\nfunc main() {\n\td.InitializeDB()\n\tapp := fiber.New()\n\tr.PublicRoutes(app)\n\tr.PrivateRoutes(app)\n\tapp.Listen(\":3000\")\n}"
}
